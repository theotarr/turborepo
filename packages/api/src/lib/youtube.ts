import type { Transcript } from "@acme/validators";

const RE_PATH = /v|e(?:mbed)?|shorts/;
const ID_LENGTH = 11;

/**
 * Get video id from path or search params
 * @param videoUrlOrId - video url or video id
 * @returns {string|null} - the id of null
 */
export const getVideoId = (videoUrlOrId: string): string | null => {
  if (!videoUrlOrId) {
    return null;
  }

  if (videoUrlOrId.length === ID_LENGTH) {
    return videoUrlOrId;
  }

  const url = new URL(videoUrlOrId);
  const segments = url.pathname.split("/");

  if (segments[1]?.length === ID_LENGTH) {
    return segments[1];
  }
  const id = RE_PATH.test(segments[1] || "")
    ? segments[2]
    : url.searchParams.get("v");
  return id ?? null;
};

/**
 * Fetch captions for a YouTube video using Apify API
 * @param videoId - The YouTube video ID
 * @returns {Promise<Transcript[]>} Array of transcript segments with text and timestamps
 */
export async function getVideoTranscript(videoId: string): Promise<{
  title: string;
  transcript: Transcript[];
}> {
  try {
    const response = await fetch(
      `https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync-get-dataset-items?token=${process.env.APIFY_API_TOKEN}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          startUrls: [
            {
              url: `https://www.youtube.com/watch?v=${videoId}`,
              method: "GET",
            },
          ],
          downloadSubtitles: true,
          saveSubsToKVS: true,
          subtitlesLanguage: "en",
          preferAutoGeneratedSubtitles: true,
          subtitlesFormat: "plaintext",
        }),
      },
    );
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const body = await response.json();
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
    const video = body[0];
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const { title, subtitles } = video;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
    const text = subtitles[0].plaintext;

    if (!response.ok) {
      console.error(response);
      throw new Error(`API request failed with status ${response.status}`);
    }

    // Transform the Apify response into our Transcript format
    const transcript = [
      {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        text,
        start: 0,
      },
    ];
    return {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      title,
      transcript,
    };
  } catch (error) {
    console.error("Failed to fetch transcript:", error);
    throw new Error("Failed to fetch video transcript");
  }
}
